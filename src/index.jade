doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Введение в AngularJS

    link(href='http://fonts.googleapis.com/css?family=Open+Sans:300,600', rel='stylesheet', type='text/css')

    // build:css styles/styles.css
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-twilight.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body

    article

      section
        h1 Введение в AngularJS
        //h3
          //a(href='https://twitter.com/markdalgleish') @markdalgleish
        //img.avatar.avatar--small(src='images/profile.jpg')

      section
        h2 Вспомним MVC
        br
        img.logo--mvc(src='images/mvc.jpg')


      section
        h2 MVC в AngularJS


      section
        h2 Контроллер
        ul
          li
          li Объекты и функции на <i>javascript</i>
          li Именуются всегда "controllername<b>Ctrl</b>"
          li Отвечают за логику поведения компонент
          li Работают только с данными из модели (<i>$scope</i>)

      section
        h2 Модель
        img.logo(src='images/model.png')
        ul 
          li
          li Содержит конкретные данные для представления
          li Видна через ссылку (<i>$scope</i>)
          li Изменения в модели отображаются в представлении

      section 
        h2 Представление
        br
        h3 Для программиста - это HTML (в большинстве случаев)
        h2 <b>НО!</b>
        h3.bullet AngularJS работает с DOM (за это мы его и любим) 
        img.bullet.avatar--small(src='images/love.png')

      section
        h2 Общая концепция 

      section
        h2 Отображение в браузере
        br
        img.img--half(src='images/angular-concept.png')
        span Перед отображением происходит перехват DOM, он модифицируется ангуляром, в соответствии с моделью, и, модифицированный, передаётся браузеру.

      section
          h2 Отображение в браузере
          br
          div(style="text-align: left")
            img.img(src='images/concepts-view.png' align="right")
            span AngularJS ищет <b><i>директивы</i></b>, которые, в свою очередь, определяют отслеживаемые элементы в модели. 
              Результатом является постоянно обновляемое представление, которое не нуждается в повторной генерации на основе измененных данных. 
            br
            br
            span Модель <b><i>($scope)</i></b> становится единственным достоверным источником данных для представления.

      section
        h2 Демонстрация

      section
        h3 Исходный код
        pre.language-javascript
          code
            include:escape ./app/index.html 



      section
        h2 Демо 
        small <i>Примечание:</i> Cлайд интерактивный. Можно в него потыкать. Здесь исполняется код предыдущего слайда
        br
        include ./app/index.html 
        br
        //iframe(style="background: #FFFFFF" src='app/index.html' )
        img.img.img--half(src='images/databinding.png' align="left")

      section
        h2 Итог
        br
        //Основная цель для программиста пишущего приложение с использованием AngularJS:
        ul 
          li
          li С помощью HTML и дирректив пишется как <b>отоображать</b> данные из <i><b>$scope</i></b>
          //(добавлять, удалять, изменять)
          li В контроллерах пишется как <b>обрабатывать</b> данные из <i><b>$scope</i></b> 

      //section
        //h3 Пояснения
        //p
          //small <i>Примечание:</i> Предыдущий слайд был интерактивным. Можно в него потыкать.
        //div(style="text-align: content")
          //img.img.img--half(src='images/databinding.png' align="left")
          //span Код выглядит как обычный HTML, с некоторыми дополнениями. В терминах AngularJS это называется <i>шаблон</i>. <br/> 
               //Когда приложение стартует, запускается специальный сервис <i>"компилятор"</i>, который, как говорилось ранее, парсит и обрабатывает HTML. 
        //br
        //Загруженный, изменённый и отрендеренный DOM называется <i>"представление" (вьюха)</i>
       
      section
        h2 Основные понятия AngularJS
        ul
          li
          li Сервисы
          li Компилятор
          li Инжектор
          li Шаблоны
          li Модули
          li Директивы
          li Фильтры

      section
        h2 Сервисы
        br
        span.bullet Сервисы Angular это одиночки (<i>singletons</i> — классы, у которых есть только один экземпляр), которые выполняют конкретные задачи, общие для веб-приложений.
        br
        span.bullet Например, <b><i>$http</i></b> сервис предоставяет низкоуровневый доступ к браузерному объекту XMLHttpRequest.

      section
        h2 Компилятор
        span Компилятор — это angular-сервис, который сканирует DOM в поисках специальных атрибутов. 
        br
        span Процесс компиляции делится на две фазы:
        br
        ul
          li
          li <b>Компиляция</b>: просмотр DOM и подготовка всех директив. Результатом этой фазы является функция линковки.
          li <b>Связывание</b>: слияние директив и их областей видимости для получения динамического вида. Любые изменения модели в области видимости моментально отображаются в представлении, а любые взаимодействия пользователя с представлением обновляют модель.

      section
        h2 Инжектор
        br
        span <b>Инжектор</b> — это надстройщик всех сервисов. Для каждого Angular-приложения существует один и только один инжектор. Инжектор позволяет находить экземпляры объектов по их именам. Инжектор поддерживает внутри себя кэш объектов, таким образом несколько вызовов поиска какого-либо объекта вернут один и тот же экземпляр. Если инжектор ничего не находит, он просит фабрику создать новый экземпляр.
      
      section
        h2 Модули
        br
        span Место где мы пишем логику нашего Angular-приложения
        span Место где мы определям зависимости
        span Настраиваем инжектор
        pre.language-javascript
          code
            include:escape ./app/module.html

        pre.language-javascript
          code.
            var app = angular.module('store', [ ]);
          
      section
        h2 Внедрение зависимости
        br
        pre.language-javascript
          code.
            // Вы пишете функции типа этой.
            function doSomething(serviceA, serviceB) {
              // тут какие-то действия.
            }
            

            // *** дедовский способ *** 
            var serviceA = $injector.get('serviceA');
            var serviceB = $injector.get('serviceB');
             
            // теперь можно вызывать функцию
            doSomething(serviceA, serviceB);
                     

            // *** стильный, модный, молодёжный способ *** 
            // $injector сам передаст необходимые аргументы функции
            $injector.invoke(doSomething); 
            //Именно так фреймворк вызывает ваши функции

      section
        h2 Шаблоны
        br
        span Шаблон Angular является декларативной спецификацией, которая, наряду с информацией из модели и контроллером, влияет на то, что пользователь видит в браузере. Это статичный DOM, содержащий HTML, CSS, и специальные элементы и атрибуты Angular. Элементы и атрибуты заставляют Angular добавить поведение и преобразовать DOM-шаблон в динамический DOM.
        
      section
        h2 Элеметы используемые в шаблонах
        ul 
          li Директива 
          li Разметка <br/> (двойные фигурные скобки {{ }} для связи выражений, встраиваемых Angular'ом в разметку элементов)
          li Фильтр
          li Управляющие элементы формы 

      section
        h2 Директивы
        br
        span Директивы — это изменение поведения или преобразование модели DOM, связанное с пользовательским атрибутом, именем элемента, или css классом. 
        Директивы позволяют расширять HTML синтаксис, в декларативной форме. Ниже приведен пример связывания данных для директивы contenteditable.
        br
        br
        small Во всех примерах всё что начинается с <b>ng-*</b> - это директивы
        
      section
        h2 Пример директив


      section
        h2 Использование
        pre.language-javascript
          code
            include:escape ./app/directive.html
      
      section
        h2 Собственные директивы
        pre
          code.language-javascript.
            app.directive('myDirectiveElement', function() {
                return {
                  restrict: 'E',
                  templateUrl: 'templateElement.html'
                };
            });

            app.directive('myDirectiveAttribute', function() {
                return {
                  restrict: 'A',
                  templateUrl: 'templateAttribute.html'
                };
            });



      section
        h2 Собственные директивы
        small templateElement.html
        pre
          code.language-javascript
            include:escape ./app/templateElement.html
        
        small templateAttribute.html
        pre
          code.language-javascript
            include:escape ./app/templateAttribute.html


      section
        h2 Фильтры
        br
        span Фильтры преобразуют данные. Обычно они используются в связке с текущей локалью пользователя, чтобы форматировать данные в специфичный для данной локализации формат.
        span Фильтры близки по духу к конвейерам в <b>UNIX</b> и используют тот же синтаксис | (вертикальная черта)

      section 
        h2 Пример фильтра
        br
        pre.language-javascript
          code
            include:escape ./app/filter.html 
        br
        small <i>Примечание:</i> Здесь тоже можно поиграться  
        iframe( height="50" style="background: #FFFFFF")(src='app/filter.html ' )




      section.gif.gif--end
      
      section.gif.gif--magic
        h1 Подробнее о

      section 
        h3 После загрузки скрипта angular.js и построения DOM
        br
        div 
          img.img.img--half.img--half(src='images/concepts-startup.png' align="left" style="margin-top: -40px")
          div
            span
              ul
                li Angular ищет ng-app директиву, определяющая область действия фреймворка
                li Этот модуль используется для настройки <i><b>$injector</i></b>
                li <i><b>$injector</i></b> используется для создания сервиса <i><b>$compile</i></b> и <i><b>$scope</i></b>
                li Сервис <i><b>$compile</i></b> используется для компиляции DOM и связки его с <i><b>$scope</i></b>
                li Присваиваются значения <b>World</b> свойству <b>name</b> в области видимости (<i><b>$scope</i></b>)
       

      section.gif.gif--future
        h1.bullet Что дальше?
        ul
          li <a href="https://docs.angularjs.org/tutorial">Туториал </a> с учебным приложением "Каталог телефонов" <br>(<a href="http://angular.ru/tutorial">на русском</a>)
          li <a href="http://campus.codeschool.com/courses/shaping-up-with-angular-js/intro">Видео лекции</a>. Изучай AngularJS в браузере
          li <a href="http://yeoman.io/codelab.html">Yeoman</a> генератор каркаса приложения
          
          //li So what's the difference? <strong>Config vs code.</strong>

      section
        h2 Спасибо за внимание! 
        h3
          a(href='https://github.com/QIvan') QIvan
        img.avatar.avatar--small(src='images/profile.jpg')

      section
        h2 Ссылка на презентацию: 
        img.img.small(src='images/presentation-qr.png')

    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/main.js')
    // endbuild
